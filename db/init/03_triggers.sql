-- Używaj schematu APP
ALTER SESSION SET CURRENT_SCHEMA = APP;

-- Upewnij się, że tabela logów istnieje (jeśli nie - utwórz)
BEGIN
  EXECUTE IMMEDIATE '
    CREATE TABLE APP_AUDIT_LOG (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        OBJ_NAME VARCHAR2(64),
        OPERATION VARCHAR2(16),
        OBJ_ID NUMBER,
        DETAILS VARCHAR2(4000),
        CHANGED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE = -955 THEN NULL; -- tabela już istnieje
    ELSE RAISE;
    END IF;
END;
/

-- Trigger dla tabeli APP_ORDER
CREATE OR REPLACE TRIGGER TRG_APP_ORDER_AUDIT
AFTER INSERT OR UPDATE OR DELETE ON APP_ORDER
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    INSERT INTO APP_AUDIT_LOG (OBJ_NAME, OPERATION, OBJ_ID, DETAILS)
    VALUES ('APP_ORDER', 'INSERT', :NEW.ORDER_ID, 'New order created');
  ELSIF UPDATING THEN
    INSERT INTO APP_AUDIT_LOG (OBJ_NAME, OPERATION, OBJ_ID, DETAILS)
    VALUES ('APP_ORDER', 'UPDATE', :OLD.ORDER_ID, 'Order updated');
  ELSIF DELETING THEN
    INSERT INTO APP_AUDIT_LOG (OBJ_NAME, OPERATION, OBJ_ID, DETAILS)
    VALUES ('APP_ORDER', 'DELETE', :OLD.ORDER_ID, 'Order deleted');
  END IF;
END;
/

-- Trigger dla tabeli APP_PRODUCT
CREATE OR REPLACE TRIGGER TRG_APP_PRODUCT_AUDIT
AFTER INSERT OR UPDATE OR DELETE ON APP_PRODUCT
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    INSERT INTO APP_AUDIT_LOG (OBJ_NAME, OPERATION, OBJ_ID, DETAILS)
    VALUES ('APP_PRODUCT', 'INSERT', :NEW.PRODUCT_ID, 'New product created');
  ELSIF UPDATING THEN
    INSERT INTO APP_AUDIT_LOG (OBJ_NAME, OPERATION, OBJ_ID, DETAILS)
    VALUES ('APP_PRODUCT', 'UPDATE', :OLD.PRODUCT_ID, 'Product updated');
  ELSIF DELETING THEN
    INSERT INTO APP_AUDIT_LOG (OBJ_NAME, OPERATION, OBJ_ID, DETAILS)
    VALUES ('APP_PRODUCT', 'DELETE', :OLD.PRODUCT_ID, 'Product deleted');
  END IF;
END;
/
